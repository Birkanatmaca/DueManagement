Ata mahallesi query

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    role VARCHAR(50) NOT NULL DEFAULT 'parent',
    is_verified BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE tokens (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    token TEXT NOT NULL,
    ip_address VARCHAR(45), -- IPv6 desteği için
    created_at TIMESTAMPTZ DEFAULT NOW(),
    validity_date TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE verification_codes (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    code VARCHAR(10) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    expires_at TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE password_reset_tokens (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    token TEXT NOT NULL UNIQUE,
    expires_at TIMESTAMPTZ NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE children (
    id SERIAL PRIMARY KEY,
    user_id INTEGER,
    name VARCHAR(100) NOT NULL,
    birth_date DATE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE dues (
    id SERIAL PRIMARY KEY,
    child_id INTEGER NOT NULL REFERENCES children(id) ON DELETE CASCADE,
    month INTEGER NOT NULL,         -- 1-12 (Ocak-Aralık)
    year INTEGER NOT NULL,          -- 2024, 2025, ...
    amount NUMERIC(10,2) NOT NULL,  -- Aidat tutarı
    is_paid BOOLEAN NOT NULL DEFAULT FALSE, -- Ödendi mi
    due_date DATE NOT NULL,         -- Son ödeme tarihi
    paid_at TIMESTAMPTZ,            -- Ödendiyse ödeme tarihi
    created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE receipts (
    id SERIAL PRIMARY KEY,
    due_id INTEGER NOT NULL,
    file_url TEXT NOT NULL, -- Dosya yolu veya url
    uploaded_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (due_id) REFERENCES dues(id) ON DELETE CASCADE
);

CREATE TABLE pending_users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Kullanıcı Yönetimi
-- Yeni kullanıcı ekle
INSERT INTO users (name, last_name, email, phone, role, password) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id;

-- Kullanıcı güncelle
UPDATE users SET name = $1, last_name = $2, email = $3, phone = $4, role = $5 WHERE id = $6;

-- Kullanıcı sil
DELETE FROM users WHERE id = $1;

-- Kullanıcıları listele
SELECT * FROM users;

-- Yönetici Yönetimi
-- Kullanıcıyı yönetici yap
UPDATE users SET role = 'manager' WHERE id = $1;

-- Yönetici listesini çek
SELECT * FROM users WHERE role = 'manager' OR role = 'admin';

-- Aidat Yönetimi
-- Yeni aidat ekle
INSERT INTO dues (child_id, month, year, amount, due_date) VALUES ($1, $2, $3, $4, $5) RETURNING id;

-- Aidat güncelle
UPDATE dues SET amount = $1, due_date = $2, is_paid = $3 WHERE id = $4;

-- Aidat sil
DELETE FROM dues WHERE id = $1;

-- Aidatları listele
SELECT * FROM dues;

-- Dekont Yönetimi
-- Yeni dekont ekle
INSERT INTO receipts (due_id, file_url) VALUES ($1, $2) RETURNING id;

-- Dekont güncelle
UPDATE receipts SET file_url = $1 WHERE id = $2;

-- Dekont sil
DELETE FROM receipts WHERE id = $1;

-- Dekontları listele
SELECT * FROM receipts;

-- Sistem İstatistikleri
-- Toplam ciro
SELECT COALESCE(SUM(amount), 0) FROM dues WHERE is_paid = true;

-- Aylık ciro
SELECT EXTRACT(YEAR FROM paid_at) as year, EXTRACT(MONTH FROM paid_at) as month, SUM(amount) FROM dues WHERE is_paid = true GROUP BY year, month ORDER BY year DESC, month DESC;

-- Sistem Ayarları Yönetimi
-- Ayarları listele
SELECT * FROM settings;

-- Ayar güncelle
UPDATE settings SET value = $1 WHERE key = $2;

-- Log Yönetimi
-- Logları listele
SELECT * FROM logs ORDER BY created_at DESC;

-- Log detayını çek
SELECT * FROM logs WHERE id = $1;
